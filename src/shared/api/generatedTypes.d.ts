/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns your own user profile */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1 */
                            id?: number;
                            /** @example マイコー */
                            real_name?: string;
                            /** @example 200 */
                            adventure_level?: number;
                            /** @example 10 years ago */
                            user_length?: string;
                            /** @example https://www.renshuu.org/img/adventure/f/ozhnxb4_100_20240408.png */
                            kao?: string;
                            studied?: {
                                /**
                                 * @description Number of terms (of all types) studied today
                                 * @example 100
                                 */
                                today_all?: number;
                                /** @example 20 */
                                today_vocab?: number;
                                /** @example 20 */
                                today_grammar?: number;
                                /** @example 20 */
                                today_kanji?: number;
                                /** @example 20 */
                                today_sent?: number;
                                /**
                                 * @description Verb conjugation terms (special schedule)
                                 * @example 20
                                 */
                                today_conj?: number;
                                /**
                                 * @description Adjective conjugation terms (special schedule)
                                 * @example 20
                                 */
                                today_aconj?: number;
                            };
                            level_progress_percs?: {
                                vocab?: {
                                    /**
                                     * @description JLPT N1 / Advanced level
                                     * @example 75
                                     */
                                    n1?: number;
                                    /**
                                     * @description JLPT N2 / Pre-Advanced level
                                     * @example 75
                                     */
                                    n2?: number;
                                    /**
                                     * @description JLPT N3 / Intermediate level
                                     * @example 75
                                     */
                                    n3?: number;
                                    /**
                                     * @description JLPT N4 / Pre-Intermediate level
                                     * @example 75
                                     */
                                    n4?: number;
                                    /**
                                     * @description JLPT N5 / Beginner level
                                     * @example 75
                                     */
                                    n5?: number;
                                    /**
                                     * @description Japanese Basics level
                                     * @example 75
                                     */
                                    n6?: number;
                                    /**
                                     * @description Hiragana
                                     * @example 75
                                     */
                                    kana?: number;
                                    /**
                                     * @description Katakana
                                     * @example 75
                                     */
                                    kata?: number;
                                };
                                kanji?: {
                                    /**
                                     * @description JLPT N1 / Advanced level
                                     * @example 75
                                     */
                                    n1?: number;
                                    /**
                                     * @description JLPT N2 / Pre-Advanced level
                                     * @example 75
                                     */
                                    n2?: number;
                                    /**
                                     * @description JLPT N3 / Intermediate level
                                     * @example 75
                                     */
                                    n3?: number;
                                    /**
                                     * @description JLPT N4 / Pre-Intermediate level
                                     * @example 75
                                     */
                                    n4?: number;
                                    /**
                                     * @description JLPT N5 / Beginner level
                                     * @example 75
                                     */
                                    n5?: number;
                                };
                                grammar?: {
                                    /**
                                     * @description JLPT N1 / Advanced level
                                     * @example 75
                                     */
                                    n1?: number;
                                    /**
                                     * @description JLPT N2 / Pre-Advanced level
                                     * @example 75
                                     */
                                    n2?: number;
                                    /**
                                     * @description JLPT N3 / Intermediate level
                                     * @example 75
                                     */
                                    n3?: number;
                                    /**
                                     * @description JLPT N4 / Pre-Intermediate level
                                     * @example 75
                                     */
                                    n4?: number;
                                    /**
                                     * @description JLPT N5 / Beginner level
                                     * @example 75
                                     */
                                    n5?: number;
                                };
                                sent?: {
                                    /**
                                     * @description JLPT N1 / Advanced level
                                     * @example 75
                                     */
                                    n1?: number;
                                    /**
                                     * @description JLPT N2 / Pre-Advanced level
                                     * @example 75
                                     */
                                    n2?: number;
                                    /**
                                     * @description JLPT N3 / Intermediate level
                                     * @example 75
                                     */
                                    n3?: number;
                                    /**
                                     * @description JLPT N4 / Pre-Intermediate level
                                     * @example 75
                                     */
                                    n4?: number;
                                    /**
                                     * @description JLPT N5 / Beginner level
                                     * @example 75
                                     */
                                    n5?: number;
                                };
                            };
                            streaks?: {
                                vocab?: {
                                    /**
                                     * @description Number of terms correct in a row in quizzing (currently)
                                     * @example 5
                                     */
                                    correct_in_a_row?: number;
                                    /**
                                     * @description Number of terms correct in a row in quizzing (all-time)
                                     * @example 5
                                     */
                                    correct_in_a_row_alltime?: number;
                                    /** @example 5 */
                                    days_studied_in_a_row?: number;
                                    /** @example 5 */
                                    days_studied_in_a_row_alltime?: number;
                                };
                                kanji?: {
                                    /**
                                     * @description Number of terms correct in a row in quizzing (currently)
                                     * @example 5
                                     */
                                    correct_in_a_row?: number;
                                    /**
                                     * @description Number of terms correct in a row in quizzing (all-time)
                                     * @example 5
                                     */
                                    correct_in_a_row_alltime?: number;
                                    /** @example 5 */
                                    days_studied_in_a_row?: number;
                                    /** @example 5 */
                                    days_studied_in_a_row_alltime?: number;
                                };
                                grammar?: {
                                    /**
                                     * @description Number of terms correct in a row in quizzing (currently)
                                     * @example 5
                                     */
                                    correct_in_a_row?: number;
                                    /**
                                     * @description Number of terms correct in a row in quizzing (all-time)
                                     * @example 5
                                     */
                                    correct_in_a_row_alltime?: number;
                                    /** @example 5 */
                                    days_studied_in_a_row?: number;
                                    /** @example 5 */
                                    days_studied_in_a_row_alltime?: number;
                                };
                                sent?: {
                                    /**
                                     * @description Number of terms correct in a row in quizzing (currently)
                                     * @example 5
                                     */
                                    correct_in_a_row?: number;
                                    /**
                                     * @description Number of terms correct in a row in quizzing (all-time)
                                     * @example 5
                                     */
                                    correct_in_a_row_alltime?: number;
                                    /** @example 5 */
                                    days_studied_in_a_row?: number;
                                    /** @example 5 */
                                    days_studied_in_a_row_alltime?: number;
                                };
                                conj?: {
                                    /**
                                     * @description Number of terms correct in a row in quizzing (currently)
                                     * @example 5
                                     */
                                    correct_in_a_row?: number;
                                    /**
                                     * @description Number of terms correct in a row in quizzing (all-time)
                                     * @example 5
                                     */
                                    correct_in_a_row_alltime?: number;
                                    /** @example 5 */
                                    days_studied_in_a_row?: number;
                                    /** @example 5 */
                                    days_studied_in_a_row_alltime?: number;
                                };
                                aconj?: {
                                    /**
                                     * @description Number of terms correct in a row in quizzing (currently)
                                     * @example 5
                                     */
                                    correct_in_a_row?: number;
                                    /**
                                     * @description Number of terms correct in a row in quizzing (all-time)
                                     * @example 5
                                     */
                                    correct_in_a_row_alltime?: number;
                                    /** @example 5 */
                                    days_studied_in_a_row?: number;
                                    /** @example 5 */
                                    days_studied_in_a_row_alltime?: number;
                                };
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reibun/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search renshuu's sentence library
         * @description Returns matching sentence(s).
         */
        get: {
            parameters: {
                query: {
                    /** @description The search value (Japanese or English) */
                    value: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1 */
                            result_count?: number;
                            /** @example 1 */
                            pg?: number;
                            /** @example 10 */
                            perPage?: number;
                            reibuns?: components["schemas"]["SimpleSentence"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reibun/search/{word_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search renshuu's example sentences for a specific word
         * @description Returns example sentences for that word
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The word id */
                    word_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1 */
                            result_count?: number;
                            /** @example 1 */
                            pg?: number;
                            /** @example 10 */
                            perPage?: number;
                            reibuns?: components["schemas"]["SimpleSentence"][];
                        };
                    };
                };
                /** @description Word could not be found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/grammar/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search renshuu's grammar dictionary
         * @description Returns matching grammar.
         */
        get: {
            parameters: {
                query: {
                    /** @description The search value (Japanese or English) */
                    value: string;
                    /** @description Page of results (count starts from 1) */
                    pg?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1 */
                            result_count?: number;
                            /** @example 2 */
                            total_pg?: number;
                            /** @example 20 */
                            per_pg?: number;
                            /** @example 1 */
                            pg?: number;
                            grammar?: components["schemas"]["Grammar"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/grammar/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lookup grammar
         * @description Returns specific grammar.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The grammar Id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Grammar"];
                    };
                };
            };
        };
        /** Add grammar to schedule or list */
        put: {
            parameters: {
                query?: {
                    /** @description The ID of the list to add to */
                    list_id?: string;
                    /** @description The ID of the schedule to add to */
                    sched_id?: string;
                };
                header?: never;
                path: {
                    /** @description The grammar Id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully added. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description List or schedule could not be found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description List or schedule already contained this grammar. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Remove grammar from schedule or list */
        delete: {
            parameters: {
                query?: {
                    /** @description The ID of the list to remove from */
                    list_id?: string;
                    /** @description The ID of the schedule to remove from */
                    sched_id?: string;
                };
                header?: never;
                path: {
                    /** @description The grammar Id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully removed. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description List or schedule could not be found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description List or schedule did not contain this grammar. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kanji/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search renshuu's kanji dictionary
         * @description Returns summary of matching kanji.
         */
        get: {
            parameters: {
                query: {
                    /** @description The search value (Japanese or English) */
                    value: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1 */
                            result_count?: number;
                            kanjis?: components["schemas"]["SimpleKanji"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kanji/{kanji}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lookup kanji
         * @description Returns details of that kanji.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The kanji (character) */
                    kanji: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Kanji"];
                    };
                };
            };
        };
        /** Add kanji to schedule or list */
        put: {
            parameters: {
                query?: {
                    /** @description The ID of the list to add to */
                    list_id?: string;
                    /** @description The ID of the schedule to add to */
                    sched_id?: string;
                };
                header?: never;
                path: {
                    /** @description The kanji (character) */
                    kanji: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully added. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description List or schedule could not be found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description List or schedule already contained this kanji. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Remove kanji from schedule or list */
        delete: {
            parameters: {
                query?: {
                    /** @description The ID of the list to remove from */
                    list_id?: string;
                    /** @description The ID of the schedule to remove from */
                    sched_id?: string;
                };
                header?: never;
                path: {
                    /** @description The kanji (character) */
                    kanji: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully removed. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description List or schedule could not be found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description List or schedule did not contain this kanji. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/word/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search renshuu's vocabulary dictionary
         * @description Returns details of matching words.
         */
        get: {
            parameters: {
                query: {
                    /** @description The search value (Japanese or English) */
                    value: string;
                    /** @description Page of results (count starts from 1) */
                    pg?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1 */
                            result_count?: number;
                            /** @example 2 */
                            total_pg?: number;
                            /** @example 50 */
                            per_pg?: number;
                            /** @example 1 */
                            pg?: number;
                            /** @example こちら */
                            query?: string;
                            words?: components["schemas"]["Word"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/word/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lookup word based on word's id
         * @description Returns details of that word.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The word's id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1 */
                            result_count?: number;
                            /** @example 2 */
                            total_pg?: number;
                            /** @example 50 */
                            per_pg?: number;
                            /** @example 1 */
                            pg?: number;
                            /** @example ##11050 */
                            query?: string;
                            words?: components["schemas"]["Word"][];
                        };
                    };
                };
            };
        };
        /** Add word to schedule or list */
        put: {
            parameters: {
                query?: {
                    /** @description The ID of the list to add to */
                    list_id?: string;
                    /** @description The ID of the schedule to add to */
                    sched_id?: string;
                };
                header?: never;
                path: {
                    /** @description The word's id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully added. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description List or schedule could not be found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description List or schedule already contained this word. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Remove word from schedule or list */
        delete: {
            parameters: {
                query?: {
                    /** @description The ID of the list to remove from */
                    list_id?: string;
                    /** @description The ID of the schedule to remove from */
                    sched_id?: string;
                };
                header?: never;
                path: {
                    /** @description The word's id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully removed. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description List or schedule could not be found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description List or schedule did not contain this word. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all user schedules */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            schedules?: components["schemas"]["Schedule"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schedule/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all user schedule specified by Id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The schedule's id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            schedules?: components["schemas"]["Schedule"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schedule/{id}/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of terms in the user schedule specified by id */
        get: {
            parameters: {
                query?: {
                    /** @description Page of results */
                    pg?: string;
                    /** @description Group/subset from the terms */
                    group?: "all" | "blocked" | "studied" | "notyetstudied" | "cannot_study" | "review_today" | "mastery_1" | "mastery_2" | "mastery_3" | "mastery_4" | "mastery_5" | "mastery_6" | "mastery_7" | "mastery_8" | "mastery_9";
                };
                header?: never;
                path: {
                    /** @description The schedule's id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            schedules?: components["schemas"]["Schedule"][];
                            contents?: {
                                /** @example 1 */
                                result_count?: number;
                                /** @example 2 */
                                total_pg?: number;
                                /** @example 50 */
                                per_pg?: number;
                                /** @example 1 */
                                pg?: number;
                                /** @example all */
                                group?: string;
                                terms?: (components["schemas"]["Word"] | components["schemas"]["Kanji"] | components["schemas"]["Grammar"] | components["schemas"]["SimpleSentence"])[];
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all lists made by user, grouped by termtype and groups */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            termtype_groups?: {
                                /** @enum {string} */
                                termtype?: "vocab" | "kanji" | "grammar" | "sent";
                                list_count?: number;
                                groups?: {
                                    list_count?: number;
                                    group_title?: string;
                                    lists?: components["schemas"]["List"][];
                                }[];
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/list/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all terms in the specified user list */
        get: {
            parameters: {
                query?: {
                    /** @description Page of results */
                    pg?: string;
                };
                header?: never;
                path: {
                    /** @description The list id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["List"];
                    };
                };
                /** @description List could not be found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/list/all/{termtype}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all terms of that type studied by the user */
        get: {
            parameters: {
                query?: {
                    /** @description Page of results */
                    pg?: string;
                };
                header?: never;
                path: {
                    /** @description The type of terms */
                    termtype: "vocab" | "kanji" | "grammar" | "sent";
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            contents?: {
                                /** @example 1 */
                                result_count?: number;
                                /** @example 2 */
                                total_pg?: number;
                                /** @example 50 */
                                per_pg?: number;
                                /** @example 1 */
                                pg?: number;
                                /** @example all */
                                group?: string;
                                terms?: (components["schemas"]["Word"] | components["schemas"]["Kanji"] | components["schemas"]["Grammar"] | components["schemas"]["SimpleSentence"])[];
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        List: {
            list_id?: number;
            /** @example Michael's cool words */
            title?: string;
            /** @example Words picked up from living in Japan */
            description?: string;
            /** @enum {string} */
            termtype?: "vocab" | "kanji" | "grammar" | "semt";
            /** @example 20 */
            num_terms?: number;
            /** @enum {string} */
            privacy?: "public" | "private";
            contents?: {
                /** @example 1 */
                result_count?: number;
                /** @example 2 */
                total_pg?: number;
                /** @example 50 */
                per_pg?: number;
                /** @example 1 */
                pg?: number;
                /** @example all */
                group?: string;
                terms?: (components["schemas"]["Word"] | components["schemas"]["Kanji"] | components["schemas"]["Grammar"] | components["schemas"]["SimpleSentence"])[];
            };
        };
        SimpleSentence: {
            /** @example 1000 */
            id?: string;
            /** @example カオちゃんは可愛いです。 */
            japanese?: string;
            /** @example カオちゃんはかわいいです。 */
            hiragana?: string;
            /** @example {
             *       "en": "Kao-chan is cute."
             *     } */
            meaning?: {
                [key: string]: string;
            };
        };
        Schedule: {
            /** @example 1000 */
            id?: string;
            /** @example Japanese Basics */
            name?: string;
            /** @example 0 */
            is_frozen?: number;
            today?: {
                /** @example 10 */
                review?: number;
                /** @example 20 */
                new?: number;
            };
            upcoming?: {
                /** @example 1 */
                days_in_future?: number;
                /** @example 10 */
                terms_to_review?: number;
            }[];
            terms?: {
                /** @example 1000 */
                total_count?: number;
                /** @example 1000 */
                studied_count?: number;
                /** @example 1000 */
                unstudied_count?: number;
                /** @example 1000 */
                hidden_count?: number;
            };
            new_terms?: {
                /**
                 * @description New terms learned today
                 * @example 1000
                 */
                today_count?: number;
                /**
                 * @description New terms learned in the last 7 days
                 * @example 1000
                 */
                rolling_week_count?: number;
            };
        };
        Presences: {
            scheds?: {
                /** @example 1000 */
                sched_id?: number;
                /** @example Japanese Basics Schedule */
                name?: string;
                /** @example 0 */
                hasWord?: number;
            }[];
            lists?: {
                /** @example 1000 */
                list_id?: number;
                /** @example Lesson 1 */
                name?: string;
                /** @example Japanese Basics */
                set_name?: string;
                /** @example 0 */
                hasWord?: number;
            }[];
        };
        TermUserData: {
            /** @example 10 */
            correct_count?: number;
            /** @example 2 */
            missed_count?: number;
            /** @example 70 */
            mastery_avg_perc?: number;
            /** @example {
             *       "Kanji > Kana": {
             *         "name": "Kanji > Kana",
             *         "correct_count": 5,
             *         "missed_count": 1,
             *         "mastery_perc": 63,
             *         "last_quizzed": "Not yet",
             *         "next_quiz": "2024/03/18"
             *       },
             *       "Kana > Kanji": {
             *         "name": "Kana > Kanji",
             *         "correct_count": 3,
             *         "missed_count": 8,
             *         "mastery_perc": 63,
             *         "last_quizzed": "Not yet",
             *         "next_quiz": "2024/03/23"
             *       }
             *     } */
            study_vectors?: {
                [key: string]: {
                    name?: string;
                    correct_count?: number;
                    missed_count?: number;
                    mastery_perc?: number;
                    last_quizzed?: string;
                    next_quiz?: string;
                };
            };
        };
        Grammar: {
            /** @example 6 */
            id?: string;
            /** @example While */
            title_english?: string;
            /** @example ながら */
            title_japanese?: string;
            /** @example https://renshuu.org/grammar/6 */
            url?: string;
            /** @example {
             *       "en": "While [A]; during the condition [A]"
             *     } */
            meaning?: {
                [key: string]: string;
            };
            /** @example {
             *       "en": "Both actions [A] and [B] are occuring at the same time. Emphasis is placed on the second action ([B]) in the sentence."
             *     } */
            meaning_long?: {
                [key: string]: string;
            };
            presence?: components["schemas"]["Presences"];
            user_data?: components["schemas"]["TermUserData"];
            models?: {
                /** @example 本を__読みながら__彼女を待ちます。 */
                japanese?: string;
                /** @example ほん　を　__よみながら__　かのじょ　を　まちます　。 */
                hiragana?: string;
                /** @example {
                 *       "en": "I __wait for her while__ I read a book."
                 *     } */
                meanings?: {
                    [key: string]: string;
                };
            }[];
            /**
             * @description Image of construction pattern(s), suitable for discord embeds
             * @example https://www.renshuu.org/gimages/construct_5.png?v=2
             */
            construct?: string;
        };
        SimpleKanji: {
            /** @example 1419 */
            id?: string;
            /** @example 食 */
            kanji?: string;
            /** @example eat, food */
            definition?: string;
        };
        Kanji: {
            /** @example 1419 */
            id?: string;
            /** @example 食 */
            kanji?: string;
            /** @example 9 */
            scount?: string;
            /** @example eat, food */
            definition?: string;
            /** @example 食 */
            radical?: string;
            /** @example しょく */
            radical_name?: string;
            /** @example ショク (小), ジキ (高) */
            onyomi?: string;
            /** @example た (べる) (小), く (う) (小), く (らう) (高), は (む) (x) */
            kunyomi?: string;
            /** @example 9級 */
            kanken?: string;
            /** @example N5 */
            jlpt?: string;
            rwords?: {
                /** @example しょく */
                reading?: string;
                words?: components["schemas"]["SimpleWord"][];
            }[];
            parts?: {
                /** @example 口 */
                piece?: string;
                /** @example mouth */
                definition?: string;
            }[];
            presence?: components["schemas"]["Presences"];
            user_data?: components["schemas"]["TermUserData"];
        };
        SimpleWord: {
            /** @example 食べる/たべる */
            term?: string;
            /** @example food */
            def?: string;
        };
        Word: {
            /** @example true */
            is_common?: boolean;
            /** @example 此方 */
            kanji_full?: string;
            /** @example こちら */
            hiragana_full?: string;
            /** @example 239 */
            id?: string;
            /** @example 179 */
            reibuns?: string;
            /** @example [] */
            aforms?: string[];
            /** @example 1004500 */
            edict_ent?: string;
            pic?: string[];
            /** @example [
             *       "unique-furigana",
             *       "common-hiragana",
             *       "ent_primary",
             *       "rK"
             *     ] */
            config?: string[];
            /** @example [
             *       "JLPT N5",
             *       "News/Web 10k"
             *     ] */
            markers?: string[];
            /** @example [
             *       "こ⭧ちら"
             *     ] */
            pitch?: string[];
            /** @example [] */
            notes?: string[];
            /** @example (noun) */
            typeofspeech?: string;
            presence?: components["schemas"]["Presences"];
            user_data?: components["schemas"]["TermUserData"];
            /** @example [
             *       "this way, this direction (direction close to the speaker or towards the speaker)",
             *       "here (place close to the speaker or where the speaker is)",
             *       "this (one) (something physically close to the speaker)",
             *       "I, me, we, us",
             *       "this person (someone physically close to the speaker and of equal or higher status)"
             *     ] */
            def?: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
